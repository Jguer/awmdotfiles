# vim:fileencoding=utf-8:ft=conf

font_family      Iosevka
italic_font      auto
bold_font        auto
bold_italic_font auto
font_size        13.0
font_size_delta 2
adjust_line_height 0
box_drawing_scale 0.001, 1, 1.5, 2

foreground       #eceff1
background       #263238
selection_foreground #000000
selection_background #FFFACD
url_color #0087BD
active_border_color #00ff00
inactive_border_color #cccccc
active_tab_foreground #000
active_tab_background #eee
inactive_tab_foreground #444
inactive_tab_background #999
inactive_tab_font_style normal
active_tab_font_style bold-italic

# Which edge to show the tab bar on, top or bottom
tab_bar_edge bottom

# The separator between tabs in the tab bar
tab_separator " â”‡"

# black
color0   #263238
color8   #607d8b

# red
color1   #e57373
color9   #ffb74d

# green
color2   #81c784
color10  #81c784

# yellow
color3   #FFF176
color11  #FFF176

# blue
color4  #64b5f6
color12 #64b5f6

# magenta
color5   #81c784
color13  #81c784

# cyan
color6   #64b5f6
color14  #64b5f6

# white
color7   #eceff1
color15  #78909c


cursor           #cccccc
cursor_shape     block
cursor_blink_interval     0.5
cursor_stop_blinking_after 15.0

scrollback_lines 2000
scrollback_pager less +G -R
scrollback_in_new_tab no

wheel_scroll_multiplier 5.0
click_interval 0.5
select_by_word_characters :@-./_~?&=%+#
mouse_hide_wait 3.0
focus_follows_mouse no
enabled_layouts *

url_style curly
remember_window_size   yes
initial_window_width   640
initial_window_height  400

repaint_delay    10
input_delay 3
visual_bell_duration 0.0
enable_audio_bell no
open_url_modifiers ctrl+shift
open_url_with default
rectangle_select_modifiers ctrl+alt
allow_remote_control no
use_system_wcwidth no
term xterm-kitty
window_border_width 1
window_margin_width 0
window_padding_width 0

# Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
#
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map ctrl+shift+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout

# Clipboard
map ctrl+shift+v        paste_from_clipboard
map ctrl+shift+s        paste_from_selection
map ctrl+shift+c        copy_to_clipboard
map shift+insert        paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map ctrl+shift+o      pass_selection_to_program firefox
map ctrl+shift+o        pass_selection_to_program

# Scrolling
map ctrl+shift+up        scroll_line_up
map ctrl+shift+down      scroll_line_down
map ctrl+shift+k         scroll_line_up
map ctrl+shift+j         scroll_line_down
map ctrl+shift+page_up   scroll_page_up
map ctrl+shift+page_down scroll_page_down
map ctrl+shift+home      scroll_home
map ctrl+shift+end       scroll_end
map ctrl+shift+h         show_scrollback

# Window management
map ctrl+shift+enter    new_window
map ctrl+shift+w        close_window
map ctrl+shift+]        next_window
map ctrl+shift+[        previous_window
map ctrl+shift+f        move_window_forward
map ctrl+shift+b        move_window_backward
map ctrl+shift+`        move_window_to_top
map ctrl+shift+1        first_window
map ctrl+shift+2        second_window
map ctrl+shift+3        third_window
map ctrl+shift+4        fourth_window
map ctrl+shift+5        fifth_window
map ctrl+shift+6        sixth_window
map ctrl+shift+7        seventh_window
map ctrl+shift+8        eighth_window
map ctrl+shift+9        ninth_window
map ctrl+shift+0        tenth_window
# You can also open a new window running an arbitrary program, for example:
# map ctrl+shift+y      new_window mutt
# You can also pass the current selection to the new program by using the @selection placeholder
# map ctrl+shift+y      new_window less @selection
# Finally, you can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes)
# For example, the following command opens the scrollback buffer in less in a new window.
# map ctrl+shift+y      new_window @ansi less +G -R


# Tab management
map ctrl+shift+right    next_tab
map ctrl+shift+left     previous_tab
map ctrl+shift+t        new_tab
map ctrl+shift+q        close_tab
map ctrl+shift+l        next_layout
map ctrl+shift+.        move_tab_forward
map ctrl+shift+,        move_tab_backward
# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab.


# Miscellaneous
map ctrl+shift+equal    increase_font_size
map ctrl+shift+minus    decrease_font_size
map ctrl+shift+backspace restore_font_size

# OS specific tweaks

# Copy to clipboard on select. With this enabled, simply selecting text with
# the mouse will cause the text to be copied to clipboard. Useful on platforms
# such as macOS/Wayland that do not have the concept of primary selections. Note
# that this is a security risk, as all programs, including websites open in your
# browser can read the contents of the clipboard.
copy_on_select no

# Hide the kitty window's title bar on macOS.
macos_hide_titlebar no

# Use the option key as an alt key. With this set to no, kitty will use
# the macOS native Option+Key = unicode character behavior. This will
# break any Alt+key keyboard shortcuts in your terminal programs, but you
# can use the macOS unicode input technique.
macos_option_as_alt yes

# The number is a percentage of maximum volume.
# See man XBell for details.
x11_bell_volume 80

# Prefer color emoji fonts when available. Note that this only works
# on systems such as Linux that use fontconfig. On other OSes, the emoji
# font used is system dependent. It can be overriden using symbol_map in the kitty
# configuration.
prefer_color_emoji yes
